/*! \page installation_page Installation Guide
 *
 * This section describes how to build and install the GSMINRES++ library.
 * The core library is implemented using standard C++17 and relies only on BLAS for numerical computations.
 * Interfaces are available for C and Fortran via a C-compatible API.
 * CMake is the recommended build system.
 *
 * Ensure that the runtime linker can locate libgsminres.so, or set LD_LIBRARY_PATH accordingly.
 *
 * ----------
 *
 * \section requirements System Requirements
 *
 * - C++17-compliant compiler
 * - BLAS and LAPACK libraries (e.g., OpenBLAS \ref openblas_note, Intel MKL)
 *
 * Optional:
 * - C compiler (required for the C API)
 * - Fortran compiler (required for Fortran interface)
 * - Python 3 with Numpy and Scipy (only required for auxiliary script `converter.py`)
 *
 * ----------
 *
 * \section cmake_sec Building with CMake
 * \anchor cmake_anchor
 *
 * Recommended method using CMake:
 * \code{.sh}
 * $ mkdir build
 * $ cd build
 * $ cmake ..
 * $ make install
 * \endcode
 *
 * By default, the library is installed to Home directory.
 * You can specify a custom install path:
 * \code{.sh}
 * $ cmake -DCMAKE_INSTALL_PREFIX=...
 * $ make install
 * \endcode
 *
 * Optional CMake variables:
 * | Option                                | Description |
 * |---------------------------------------|-------------|
 * | `-DCMAKE_INSTALL_PREFIX`              | Specify install location (default: Home directory) |
 * | `-DCMAKE_PREFIX_PATH`                 | Add path to find external libraries like OpenBLAS |
 * | `-DCMAKE_BUILD_TYPE`                  | Set to `Release` or `Debug` (default: Release) |
 * | `-DUSE_OPENMP`                        | Enable OpenMP parallelism (default: ON) |
 * | `-DGSMINRES_ENABLE_C_API`             | Enable the C API (default: ON) |
 * | `-DGSMINRES_ASSUME_ABI_COMPATIBLE`    | Assume ABI compatibility between `double _Complex` and `std::complex<double>` (default: OFF) |
 * | `-DGSMINRES_ENABLE_FORTRAN_INTERFACE` | Enable Fortran interface (default: ON) |
 * 
 * 
 * ----------
 *
 * \anchor make_anchor
 * \section make_sec Building with Make
 *
 * A simple Makefile is included, but it is intended mainly for testing or minimal environments.
 * It does not provide robust dependency management.
 *
 * Users who choose to use the Makefile should manually edit it to reflect their system-specific
 * settings, such as compiler flags, BLAS/LAPACK paths..
 *
 * \code{.sh}
 * $ make
 * \endcode
 *
 * ----------
 *
 * \anchor manual_anchor
 * \section manual_sec Manual Compilation
 * 
 * If you prefer to compile manually without using CMake or Makefiles, you may build
 * the library and its sample programs directly via the compiler. This approach gives
 * full control over compiler flags, linking, and build behavior. Below is a example
 * 
 * \code{.sh}
 * $ TODO_TODO_TODO
 * \endcode
 * 
 * ----------
 *
 * \section openblas_note Warning
 * OpenBLAS versions prior to 0.3.27 has bug in the `zrotg`.
 * - See: https://github.com/OpenMathLib/OpenBLAS/issues/4909
 * - **Workarounds**
 *   - Update OpenBLAS version 0.3.27 or later.
 *   - Use an alternative BLAS implementation (e.g., Netlib BLAS or Interl MKL).
 *   - Optionally, modify the source ~~~
 *
 */
